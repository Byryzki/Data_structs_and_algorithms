Student name: Pyry Laine
Student email: pyry.j.laine@tuni.fi
Student number: 50282836

TirakA projektin ensimmäisessä vaiheessa käytän päätietorakenteenani unordered_map:iä. Map:in avaimena
on ohjelmassa valmiiksi määritelty TownID ja arvona oma määrittämäni tietoalkio Town, joka sisältää
tarvittavat tiedot yksittäisestä kaupungista. Päädyin unordered_map:iin, sillä map rakenteeseen on
helppo varastoida ja myöhemmin hakea tehtävän edellyttämiä tietoja. Map -rakenteet ovat myös varsin
suosittuja, joten ne sisältävät paljon hyödyllisiä ominaisuuksia. Aluksi ajattelin käyttää tavallista
map -rakennetta, sillä tällöin avaimet olisivat lisäyksen jälkeen aina aakkosjärjestyksessä, mutta 
päädyinkin unordered_map:iin, koska vaikka aakkosjärjestämisen tehokkuus kärsii huomattavasti, kevenee
yleisimmin ohjelmassa käytetty tietorakenteeseen lisäys O(log(n)):stä O(n):ään näin parantaen
kokonaistehokkuutta.

Helpoimmat funktiot (aina "town_alphapetically" asti) sain tehokkuuteen noin O(n), josta ei mielestäni
voi parantaa, mutta viisi monimutkaisinta funktiota sain parhaimmillaan noin O(nlog(n)) tehokkuuden 
piiriin. Vaikka tämä on asymptoottisena tehokkuutena aika huono, en saanut viilattua sitä näistä 
funktioista paremmaksi. Päädyin tallentamaan funktioiden tulokset muistiin, jolloin funktio suoritetaan
ensimmäisen suorituksen jälkeen aina vakioaikaisesti näin parantaen huomattavasti kokonaistehokkuutta.
Jotkin funktiot, kuten min- ja maxdist käyttävät lisäksi muita funktioita apunaan, jolloin jos
tarvittava rakenne on jo muistissa, vältytään turhalta toistolta ja kokonaistehokkuus paranee.

Muut tietorakenteet:
Käytin funktioiden tulosten tallentamiseen kahta vektoria (alphtown ja d_increasing), jotka molemmat 
sisälsivät TownID tietotyypin sekä yhtä map -rakennetta (alldists), joka sisälsi desimmaaliluvun 
avaimena ja TownID:n arvonaan. Vektorit valitsin niiden hyvän tehokkuutensa ja ominaisuuksiensa vuoksi
, mutta perinteistä map -rakennetta käytin osin siksi, että sen avulla saisin järjestettyä avaimet
helposti suuruusjärjestykseen. Tämä tapahtuu toki tehokkuudella O(nlog(n)), mutta se ei ole juuri 
huonompi kuin muissakaan järjestysalgoritmeissa.
